?Devices
setwd("~/Google Drive/Proyectos/ExploratoryDataAn")
pdf(file = “archivo.pdf”)
with(faithful, plot(eruptions, waiting))
title (main = “old faithful geyser data”)
dev.off()
pdf(file = "archivo.pdf")
with(faithful, plot(eruptions, waiting))
title (main = "old faithful geyser data")
dev.off()
install.packages("knitr")
setwd("~/Google Drive/Proyectos/Reproducible Research/Project1/RepData_PeerAssessment1")
?read.csv
file <- "activity.csv"
data <- read.cvs(file, header = TRUE)
data <- read.csv(file, header = TRUE)
head(data)
## Read de complete file
file <- "activity.csv"
data <- read.csv(file, header = TRUE)
## ignore incomplete data
good <- complete.cases(data[,1])
subdata <- data[good]
subdata <- data[good,]
head(subdata)
hist(subdata[,1])
?transform
?lapply
class(subdata$date)
class(subdata$interval)
a <- split(subdata, subdata$date)
a
a[1]
a[2]
sum(a)
lapply(a, sum)
lapply(a[,1], sum)
dim(a)
file <- "activity.csv"
data <- read.csv(file, header = TRUE)
## ignore incomplete data
good <- complete.cases(data[,1])
subdata <- data[good,]
## use date as factor to separate the data
stepsByDay <- split(subdata, subdata$date)
## Calculate the steps recorded per day
class(stepsByDay)
dim(stepsByDay)
length(stepsByDay)
totalSteps <- data.frame()
stepsByDay[i]
class(stepsByDay[1])
stepsByDay[1]
stepsByDay[2]
length(stepsByDay[1])
length(stepsByDay[2])
dim(stepsByDay[2])
length(stepsByDay[[1]])
length(stepsByDay[[2]])
dim(stepsByDay[[2]])
dim(stepsByDay[[1]])
names(stepsByDay)
totalSteps <- data.frame(names(stepsByDay), 0)
View(totalSteps)
names(totalSteps, c("Day", "Total steps recorded"))
colnames(totalSteps) <- c("Day", "Total Steps Recorded")
View(totalSteps)
View(totalSteps)
stepsByDay[[2,1]]
stepsByDay[[1]]
stepsByDay[[2]]
stepsByDay[[2]][1]
stepsByDay[[2]][,2]
stepsByDay[[2]][,3]
sum(stepsByDay[[2]][,3])
file <- "activity.csv"
data <- read.csv(file, header = TRUE)
## ignore incomplete data
good <- complete.cases(data[,1])
subdata <- data[good,]
## use date as factor to separate the data
stepsByDay <- split(subdata, subdata$date)
## Calculate the steps recorded per day
totalSteps <- data.frame(names(stepsByDay), 0)
colnames(totalSteps) <- c("Day", "Total Steps Recorded")
View(totalSteps)
View(totalSteps)
length(stepsByDay)
for (i in 1:length(stepsByDay)) {
dimDay <- dim(stepsByDay[[i]])
if (dimDay[1] > 0) {
totalSteps <- sum(stepsByDay[[i]][,3])
}
totalSteps[i,2] <- totalSteps
}
totalSteps(1,2)
totalSteps[1,2]
dim(totalSteps)
length(totalSteps)
class(totalSteps)
totalSteps <- data.frame(names(stepsByDay), 0)
colnames(totalSteps) <- c("Day", "Total Steps Recorded")
for (i in 1:length(stepsByDay)) {
dimDay <- dim(stepsByDay[[i]])
if (dimDay[1] > 0) {
totalStepsDay <- sum(stepsByDay[[i]][,3])
}
totalSteps[i,2] <- totalSteps
}
View(totalSteps)
View(totalSteps)
for (i in 1:length(stepsByDay)) {
dimDay <- dim(stepsByDay[[i]])
if (dimDay[1] > 0) {
totalStepsDay <- sum(stepsByDay[[i]][,3])
}
totalSteps[i,2] <- totalStepsDay
}
View(totalSteps)
View(totalSteps)
for (i in 1:length(stepsByDay)) {
dimDay <- dim(stepsByDay[[i]])
if (dimDay[i] > 0) {
totalStepsDay <- sum(stepsByDay[[i]][,3])
totalSteps[i,2] <- totalStepsDay
}
}
for (i in 1:length(stepsByDay)) {
dimDay <- dim(stepsByDay[[i]])
if (dimDay > 0) {
totalStepsDay <- sum(stepsByDay[[i]][,3])
totalSteps[i,2] <- totalStepsDay
}
}
View(totalSteps)
View(totalSteps)
for (i in 1:length(stepsByDay)) {
dimDay <- dim(stepsByDay[[i]])
dimday
if (dimDay > 0) {
totalStepsDay <- sum(stepsByDay[[i]][,3])
totalSteps[i,2] <- totalStepsDay
totalStepsDay
}
}
for (i in 1:length(stepsByDay)) {
dimDay <- dim(stepsByDay[[i]])
dimDay
if (dimDay > 0) {
totalStepsDay <- sum(stepsByDay[[i]][,3])
totalSteps[i,2] <- totalStepsDay
totalStepsDay
}
}
dimDay[1]
dimDay[2]
for (i in 1:length(stepsByDay)) {
dimDay <- dim(stepsByDay[[i]])
dimDay
if (dimDay[1] > 0) {
totalStepsDay <- sum(stepsByDay[[i]][,3])
totalSteps[i,2] <- totalStepsDay
totalStepsDay
}
}
length(stepsByDay)
?print
View(data)
View(data)
?sumary
?summary
summaryData <- summary(totalSteps)
summaryData
dim(summaryData)
View(totalSteps)
View(totalSteps)
summaryData <- summary(totalSteps[,2])
summaryData
meanSteps <- mean(totalSteps[,2])
meanSteps
hist(totalSteps[,2])
View(totalSteps)
View(totalSteps)
## Read de complete file
file <- "activity.csv"
data <- read.csv(file, header = TRUE)
## ignore incomplete data
good <- complete.cases(data[,1])
subdata <- data[good,]
## use date as factor to separate the data. This creates a list in which
## data from each day is separated
stepsByDay <- split(subdata, subdata$date)
## Calculate the steps recorded per day by adding the steps recorded in each
## interval of the day, and save it in one single vector
totalSteps <- data.frame(names(stepsByDay), 0)
colnames(totalSteps) <- c("Day", "Total Steps Recorded")
for (i in 1:length(stepsByDay)) {
dimDay <- dim(stepsByDay[[i]])
if (dimDay[1] > 0) {
totalStepsDay <- sum(stepsByDay[[i]][,1])
totalSteps[i,2] <- totalStepsDay
}
}
View(totalSteps)
View(totalSteps)
meanSteps <- mean(totalSteps[,2])
medianSteps <- median(totalSteps[,2])
hist(totalSteps[,2])
?print
?paste
paste("Median:" , medianSteps)
?hist
colour()
colours()
hist(totalSteps[,2], main = "Total Steps Recorded By Day",
xlab = "Total Steps Recorded", col = "turquoise")
hist(totalSteps[,2], main = "Total Steps Recorded By Day",
xlab = "Total Steps Recorded", col = "turquoise1")
hist(totalSteps[,2], main = "Total Steps Recorded By Day",
xlab = "Total Steps Recorded", col = "turquoise2")
hist(totalSteps[,2], main = "Total Steps Recorded By Day",
xlab = "Total Steps Recorded", col = "turquoise3")
hist(totalSteps[,2], main = "Total Steps Recorded By Day",
xlab = "Total Steps Recorded", col = "turquoise4")
hist(totalSteps[,2], main = "Total Steps Recorded By Day",
xlab = "Total Steps Recorded", col = "turquoise4", breaks = 10)
View(data)
View(data)
1:5
1:5:10
2355/5
View(data)
a <- 0:288
a <- a*5
a[1]
a[288]
24*60
2355/5
View(subdata)
View(subdata)
a<- (0:451)*5
a
2355/2
max(subdata[,4])
max(subdata$interval)
2355/5
stepsByDay[[i]]
stepsByDay[[2]]
stepsByDay[[2]][1,3]
stepsByDay[[2]][2,3]
stepsByDay[[2]][2,3]
?which
meanStepsByRange <- data.frame((0:471)*5, 0, 0)
View(meanStepsByRange)
View(meanStepsByRange)
colnames(meanStepsByRange) <- c("Range", "Sum Total Steps Recorded", "Average Steps")
View(meanStepsByRange)
View(meanStepsByRange)
which(meanStepsByRange$Range, meanStepsByRange$Range == 55)
which(meanStepsByRange$Range, meanStepsByRange$Range = 55)
which(meanStepsByRange$Range = 55)
?find
?search
range <- 55
steps <- 4
meanStepsByRange[meanStepsByRange$Range = range, 2] <- meanStepsByRange[meanStepsByRange$Range = range, 2] + steps
meanStepsByRange[meanStepsByRange$Range == range, 2] <- meanStepsByRange[meanStepsByRange$Range == range, 2] + steps
View(meanStepsByRange)
View(meanStepsByRange)
plot(meanStepsByRange[,3], type = "t")
?plot
plot(meanStepsByRange[,3], type = "l")
meanStepsByRange <- data.frame((0:471)*5, 0, 0)
colnames(meanStepsByRange) <- c("Range", "Sum Total Steps Recorded", "Average Steps")
for (i in 1:length(stepsByDay)) {  ##  for all days
dimDay <- dim(stepsByDay[[i]])
if (dimDay[1] > 0) {  ## if there is data in this day
dimDay[1]
for (j in 1: dimDay[1]) {  ## for all ranges
range <-  stepsByDay[[i]][j,3]
steps <- stepsByDay[[i]][j,1]
meanStepsByRange[meanStepsByRange$Range == range, 2] <- meanStepsByRange[meanStepsByRange$Range == range, 2] + steps    ## I add the steps
}
}
}
## when the adding is over, the average for all days is calculated
meanStepsByRange[,3] <- meanStepsByRange[,2] / length(stepsByDay)
plot(meanStepsByRange[,3], type = "l")
stepsByDay[[2]]
INTERVALOES <- factor(stepsByDay[[2]][,3])
levels(INTERVALOES)
INTERVALOS <- factor(stepsByDay[[3]][,3])
levels(INTERVALOS)
## take steps from one of the samples
interv <- levels(factor(stepsByDay[[2]][,3]))
meanStepsByRange <- data.frame(interv, 0, 0)
colnames(meanStepsByRange) <- c("Range", "Sum Total Steps Recorded", "Average Steps")
for (i in 1:length(stepsByDay)) {  ##  for all days
dimDay <- dim(stepsByDay[[i]])
if (dimDay[1] > 0) {  ## if there is data in this day
dimDay[1]
for (j in 1: dimDay[1]) {  ## for all ranges
range <-  stepsByDay[[i]][j,3]
steps <- stepsByDay[[i]][j,1]
meanStepsByRange[meanStepsByRange$Range == range, 2] <- meanStepsByRange[meanStepsByRange$Range == range, 2] + steps    ## I add the steps
}
}
}
meanStepsByRange[,3] <- meanStepsByRange[,2] / length(stepsByDay)
maxSteps <- max(meanStepsByRange[,3])
which(meanStepsByRange[,3] == maxSteps, arr.ind=TRUE)
meanStepsByRange[104,3]
View(meanStepsByRange)
View(meanStepsByRange)
factor(stepsByDay[[2]][,3])
levels(factor(stepsByDay[[2]][,3]))
a <-levels(factor(stepsByDay[[2]][,3]))
file <- "activity.csv"
data <- read.csv(file, header = TRUE)
## ignore incomplete data
good <- complete.cases(data[,1])
subdata <- data[good,]
## use date as factor to separate the data. This creates a list in which
## data from each day is separated
stepsByDay <- split(subdata, subdata$date)
## interval of the day, and save it in one single vector
totalSteps <- data.frame(names(stepsByDay), 0)
colnames(totalSteps) <- c("Day", "Total Steps Recorded")
for (i in 1:length(stepsByDay)) {
dimDay <- dim(stepsByDay[[i]])
if (dimDay[1] > 0) {
totalStepsDay <- sum(stepsByDay[[i]][,1])
totalSteps[i,2] <- totalStepsDay
}
}
meanSteps <- mean(totalSteps[,2])
medianSteps <- median(totalSteps[,2])
print(paste ("Mean (value of meanSteps): ", meanSteps))
print(paste ("Median (value of medianSteps): ", medianSteps))
hist(totalSteps[,2], main = "Total Steps Recorded By Day",
xlab = "Total Steps Recorded", col = "turquoise4", breaks = 10)
intFac <- factor(stepsByDay[[2]][,3])
interv <- levels(intFac)
meanStepsByRange <- data.frame(interv, 0, 0)
colnames(meanStepsByRange) <- c("Range",
"Sum Total Steps Recorded", "Average Steps")
for (i in 1:length(stepsByDay)) {  ##  for all days
dimDay <- dim(stepsByDay[[i]])
if (dimDay[1] > 0) {  ## if there is data in this day
dimDay[1]
for (j in 1: dimDay[1]) {  ## for all ranges
range <-  stepsByDay[[i]][j,3]
steps <- stepsByDay[[i]][j,1]
meanStepsByRange[meanStepsByRange$Range == range, 2]
<- meanStepsByRange[meanStepsByRange$Range == range, 2]
+ steps    ## I add the steps
}
}
}
## when the adding is over, the average for all days is calculated
meanStepsByRange[,3] <- meanStepsByRange[,2] / length(stepsByDay)
for (i in 1:length(stepsByDay)) {  ##  for all days
dimDay <- dim(stepsByDay[[i]])
if (dimDay[1] > 0) {  ## if there is data in this day
dimDay[1]
for (j in 1: dimDay[1]) {  ## for all ranges
range <-  stepsByDay[[i]][j,3]
steps <- stepsByDay[[i]][j,1]
meanStepsByRange[meanStepsByRange$Range == range, 2]
<- meanStepsByRange[meanStepsByRange$Range == range, 2]
+ steps    ## I add the steps
}
}
}
## when the adding is over, the average for all days is calculated
meanStepsByRange[,3] <- meanStepsByRange[,2] / length(stepsByDay)
plot(meanStepsByRange[,3], interv, type = "l",
main = "Average Steps by interval", xlab = "interval", ylab = "steps")
plot(meanStepsByRange[,3], type = "l",
main = "Average Steps by interval", xlab = "interval", ylab = "steps")
View(meanStepsByRange)
View(meanStepsByRange)
?axis
axis(side = 1, labels = TRUE, interv)
?plot
plot(meanStepsByRange[,1], meanStepsByRange[,3], type = "l",
main = "Average Steps by interval", xlab = "interval", ylab = "steps")
plot(meanStepsByRange[,1])
View(meanStepsByRange)
View(meanStepsByRange)
class(meanStepsByRange[,1])
as.numeric(meanStepsByRange[,1])
?factor
intFac <- factor(stepsByDay[[2]][,3], ordered = TRUE)
interv <- levels(intFac)
meanStepsByRange <- data.frame(interv, 0, 0)
colnames(meanStepsByRange) <- c("Range",
"Sum Total Steps Recorded", "Average Steps")
for (i in 1:length(stepsByDay)) {  ##  for all days
dimDay <- dim(stepsByDay[[i]])
if (dimDay[1] > 0) {  ## if there is data in this day
dimDay[1]
for (j in 1: dimDay[1]) {  ## for all ranges
range <-  stepsByDay[[i]][j,3]
steps <- stepsByDay[[i]][j,1]
meanStepsByRange[meanStepsByRange$Range == range, 2] <- meanStepsByRange[meanStepsByRange$Range == range, 2] + steps    ## I add the steps
}
}
}
## when the adding is over, the average for all days is calculated
meanStepsByRange[,3] <- meanStepsByRange[,2] / length(stepsByDay)
View(meanStepsByRange)
View(meanStepsByRange)
plot(meanStepsByRange[,1], meanStepsByRange[,3], type = "l",
main = "Average Steps by interval", xlab = "interval", ylab = "steps")
meanStepsByRange[,1]
plot(interv, meanStepsByRange[,3], type = "l",
main = "Average Steps by interval", xlab = "interval", ylab = "steps")
dim(data)
dim(data)[1]
?copy
a <- 1>5
a <- 1:5
b <- a
View(data)
View(data)
View(meanStepsByRange)
View(meanStepsByRange)
round(1.23)
round(1.73)
good
as.numeric(good)
sum(as.numeric(!good))
text <- paste ("Number of NA data fields is ", sum(as.numeric(!good)))
print(text)
dim(data)[1]
## calculate and print number of NA values
text <- paste ("Number of NA data fields is ", sum(as.numeric(!good)))
print(text)
## create a new vector in which NA data is replaced by average in the
## same interval
dataWithNA <- data
View(dataWithNA)
View(dataWithNA)
for (k in 1:dim(data)[1]){
if (!good[k]){  ## has a NA value
index <- which(meanStepsByRange[,1] == data[k,1], arr.ind=TRUE)
dataWithoutNA[k,1] <- round(meanStepsByRange[index,3])
}
}
for (k in 1:dim(data)[1]){
if (!good[k]){  ## has a NA value
index <- which(meanStepsByRange[,1] == data[k,1], arr.ind=TRUE)
dataWithNA[k,1] <- round(meanStepsByRange[index,3])
}
}
View(meanStepsByRange)
View(meanStepsByRange)
for (k in 1:dim(data)[1]){
if (!(good[k])){  ## has a NA value
index <- which(meanStepsByRange[,1] == data[k,1], arr.ind=TRUE)
dataWithNA[k,1] <- round(meanStepsByRange[index,3])
}
}
k <- 6
index <- which(meanStepsByRange[,1] == data[k,1], arr.ind=TRUE)
index
data[k,1]
View(data)
View(data)
View(dataWithNA)
View(dataWithNA)
for (k in 1:dim(data)[1]){
if (!(good[k])){  ## has a NA value
index <- which(meanStepsByRange[,1] == data[k,3], arr.ind=TRUE)
dataWithNA[k,1] <- round(meanStepsByRange[index,3])
}
}
stepsByDayWithNA <- split(dataWithNA, dataWithNA$date)
totalSteps2 <- data.frame(names(stepsByDayWithNA), 0)
colnames(totalSteps2) <- c("Day", "Total Steps Recorded")
for (i in 1:length(stepsByDayWithNA)) {
dimDay2 <- dim(stepsByDayWithNA[[i]])
if (dimDay2[1] > 0) {
totalStepsDay2 <- sum(stepsByDayWithNA[[i]][,1])
totalSteps2[i,2] <- totalStepsDay2
}
}
meanSteps2 <- mean(totalSteps2[,2])
medianSteps2 <- median(totalSteps2[,2])
print(paste ("Mean (value of meanSteps2): ", meanSteps2))
print(paste ("Median (value of medianSteps2): ", medianSteps2))
hist(totalSteps2[,2], main = "Total Steps Recorded By Day, with NA replaced",
xlab = "Total Steps Recorded", col = "turquoise4", breaks = 10)
?par
par(mfrow = c(2,1))
hist(totalSteps[,2], main = "Total Steps Recorded By Day",
xlab = "Total Steps Recorded", col = "turquoise4", breaks = 10)
hist(totalSteps2[,2], main = "Total Steps Recorded By Day, with NA replaced",
xlab = "Total Steps Recorded", col = "salmon", breaks = 10)
par(mfrow = c(1,2))
hist(totalSteps[,2], main = "Total Steps Recorded By Day",
xlab = "Total Steps Recorded", col = "turquoise4", breaks = 10)
hist(totalSteps2[,2], main = "Total Steps Recorded By Day, with NA replaced",
xlab = "Total Steps Recorded", col = "salmon", breaks = 10)
totalNAs <- sum(as.numeric(!good))
text <- paste ("Number of NA data fields is ", totalNAs)
print(text)
goodValues <- as.numeric(!good)
totalNAs <- sum(goodValues)
text <- paste ("Number of NA data fields is ", totalNAs)
print(text)
